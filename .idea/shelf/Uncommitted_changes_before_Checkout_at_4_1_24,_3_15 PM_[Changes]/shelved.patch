Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import arcade.gui\nfrom die_arcade import DIE_X, DIE_Y, Die\nfrom checkboxes import Button\nimport time\nfrom typing import List\nfrom player import *\nimport room_dimensions\nfrom guess_box import Guess\nimport card\nfrom game_screens import InventoryMenu\n\n# Set how many rows and columns we will have\nROW_COUNT = 24\nCOLUMN_COUNT = 34\n\nTIME = 0.5\n\n# This sets the WIDTH and HEIGHT of each grid location\nWIDTH = 30\nHEIGHT = 30\n\n# This sets the margin between each cell and offset for screen edges\nMARGIN = 2\n\n# Screen dimensions\nSCREEN_WIDTH = (WIDTH + MARGIN) * COLUMN_COUNT + MARGIN\nSCREEN_HEIGHT = (HEIGHT + MARGIN) * ROW_COUNT + MARGIN\nSCREEN_TITLE = \"Clue\"\n\n# Width of Sidebar\nSIDEBAR_WIDTH = 320\n\n# Sprite settings\nPLAYER_MOVEMENT = 32\nSPRITE_SCALING = 0.06\n            \n# starting view, class\nclass StartView(arcade.View):\n    def __init__(self, width, height):\n        super().__init__()\n        self.width = width\n        self.height = height\n        self.background_img = arcade.load_texture(\"images/clue_image.jpeg\")\n        arcade.load_font(\"bulletin-gothic/BulletinGothic.otf\")\n        self.text_effect = 0\n        self.min_font_size_reached = True\n        self.max_font_size_reached = False\n\n    def on_mouse_press(self, _x, _y, _button, _modifiers):\n        \"\"\" If the user presses the mouse button, start the game. \"\"\"\n        clueGameView = ClueGameView(self.width, self.height)\n        self.window.show_view(clueGameView)\n\n    def on_draw(self):\n        \"\"\" Draw this view \"\"\"\n        self.clear()\n        # example text\n        text = \"Click\"\n        # Draw the background texture\n        arcade.draw_lrwh_rectangle_textured(0, 0,\n                                            self.width, self.height,\n                                            self.background_img)\n        # sets text size to initial small size, and adds text_effect at each iteration, which increases and decreases,\n        # pulsating.\n        text_size = 25 + self.text_effect\n\n        arcade.draw_text(text, self.window.width / 2, self.window.height / 2 - 150,\n                         arcade.color.FLORAL_WHITE, font_name=\"Bulletin Gothic\", font_size=text_size, anchor_x=\"center\")\n\n        # flags min and max font size reached, tells font when to steadily decrease or increase until other flag is set\n        # this keeps font size within an interval, 25 & 100 (text size + text_effect which grows to 75).\n        # time sleep to slow pulsating\n        if self.text_effect <= 75 and self.min_font_size_reached:\n            self.text_effect += 1\n            time.sleep(0.03)\n            if self.text_effect == 75:\n                self.max_font_size_reached = True\n                self.min_font_size_reached = False\n        elif self.text_effect >= 25 and self.max_font_size_reached:\n            self.text_effect -= 1\n            time.sleep(0.05)\n            if self.text_effect == 25:\n                self.max_font_size_reached = False\n                self.min_font_size_reached = True\n        print(self.text_effect)\n\n    def on_show_view(self):\n        \"\"\" This is run once when we switch to this view \"\"\"\n        arcade.set_background_color(arcade.csscolor.DARK_SLATE_BLUE)\n\n\nclass ClueGameView(arcade.View):  # (arcade.Window)\n    def __init__(self, width, height):\n        super().__init__()\n        # super().__init__(width, height, title)\n        self.width = width\n        self.height = height\n        \n        # initializing deck and cards\n        self.deck = Deck.initialize_cards()\n        self.player_cards = self.deck\n        \n        # We can quickly build a grid with python list comprehension\n        self.grid = [[0] * COLUMN_COUNT for _ in range(ROW_COUNT)]\n\n        # Set the window's background color\n        self.background_color = arcade.color.BLACK\n\n        # Create a dictionary to store room locations\n        self.rooms = {'study': room_dimensions.study, 'hall': room_dimensions.hall, 'lounge': room_dimensions.lounge,\n                      'library': room_dimensions.library, 'billiard_room': room_dimensions.billiard_room,\n                      'conservatory': room_dimensions.conservatory, 'ballroom': room_dimensions.ballroom,\n                      'kitchen': room_dimensions.kitchen, 'dining-room': room_dimensions.dining_room,\n                      'guessing_room': room_dimensions.guessing_room}\n\n        # Player Info\n        self.player_names = [\"Scarlet\", \"Plum\", \"Peacock\", \"Mustard\", \"Green\", \"White\"]\n\n        self.player_xs = [753, 17, 17, 497, 753, 561]\n\n        self.player_ys = [241, 625, 209, 753, 561, 17]\n\n        self.player_npcs = []\n\n        self.players = []\n\n        # Sprite Info\n        self.grid_sprite_list = arcade.SpriteList()\n\n        self.player_list = arcade.SpriteList()\n\n        self.ms_scarlet = Player(\"images/Red-Circle-Transparent.png\", 0.06)\n\n        self.ms_scarlet.center_x = self.player_xs[0]\n\n        self.ms_scarlet.center_y = self.player_ys[0]\n\n        self.player_list.append(self.ms_scarlet)\n\n        self.prof_plum = Player(\"images//Purple_Circle.png\", 0.065)\n\n        self.prof_plum.center_x = self.player_xs[1]\n\n        self.prof_plum.center_y = self.player_ys[1]\n\n        self.player_list.append(self.prof_plum)\n\n        self.mrs_peacock = Player(\"images/Pan_Blue_Circle.png\", 0.045)\n\n        self.mrs_peacock.center_x = self.player_xs[2]\n\n        self.mrs_peacock.center_y = self.player_ys[2]\n\n        self.player_list.append(self.mrs_peacock)\n\n        self.col_mustard = Player(\"images/Yellow_Circle.png\", 0.065)\n\n        self.col_mustard.center_x = self.player_xs[3]\n\n        self.col_mustard.center_y = self.player_ys[3]\n\n        self.player_list.append(self.col_mustard)\n\n        self.mayor_green = Player(\"images/—Pngtree—circle clipart green circle_5553152.png\", 0.028)\n\n        self.mayor_green.center_x = self.player_xs[4]\n\n        self.mayor_green.center_y = self.player_ys[4]\n\n        self.player_list.append(self.mayor_green)\n\n        self.chef_white = Player(\"images/open-circle-ring-transparent-png-png-see-through-background.png\", 0.027)\n\n        self.chef_white.center_x = self.player_xs[5]\n\n        self.chef_white.center_y = self.player_ys[5]\n\n        self.player_list.append(self.chef_white)\n\n        self.turn = True\n\n        self.moves = 0\n\n        self.press = 0\n\n        self.idle = 50\n\n        self.limit = 6\n\n        self.left_pressed = False\n\n        self.right_pressed = False\n\n        self.up_pressed = False\n\n        self.down_pressed = False\n\n        self.current_player = 0\n\n        self.move_list = []\n\n        for player in self.player_list:\n            self.players.append(player)\n\n        for player in self.players:\n            self.player_npcs.append(player)\n        self.player_npcs.remove(self.player_npcs[0])\n\n        # Create a list of solid-color sprites to represent each grid location\n        for row in range(ROW_COUNT):\n            for column in range(COLUMN_COUNT):\n                x = column * (WIDTH + MARGIN) + (WIDTH / 2 + MARGIN)\n                y = row * (HEIGHT + MARGIN) + (HEIGHT / 2 + MARGIN)\n                sprite = arcade.SpriteSolidColor(WIDTH, HEIGHT, arcade.color.FLORAL_WHITE)\n                sprite.center_x = x\n                sprite.center_y = y\n                self.grid_sprite_list.append(sprite)\n\n        # Room generation\n        self.room_sprite_list = arcade.SpriteList()\n        self.roomList = self.generate_rooms()\n\n        for self.room in self.roomList:\n            self.room_sprite_list.append(self.room)\n\n        # Resyncing\n        self.resync_grid_with_sprites()\n\n        # adding die to sidebar as class object\n        self.die = Die(DIE_X, DIE_Y, 50, 50)\n        # bool to control whether die appears or not\n        self.die_visible = True\n\n        # adding class object, sidebar buttons\n        self.sidebar_buttons = []\n        self.draw_buttons()\n\n    # Method for reloading sprites after I/O or other changes\n    def resync_grid_with_sprites(self):\n        for row in range(ROW_COUNT):\n            for column in range(COLUMN_COUNT):\n                pos = row * COLUMN_COUNT + column\n                if self.grid[row][column] == 0:\n                    self.grid_sprite_list[pos].color = arcade.color.GRAY\n\n    def get_color_for_room(self, room):\n        room_colors = {\n            'lounge': arcade.color.JET,\n            'library': arcade.color.ANTIQUE_BRASS,\n            'hall': arcade.color.APRICOT,\n            'study': arcade.color.CORDOVAN,\n            'billiard_room': arcade.color.BITTERSWEET_SHIMMER,\n            'conservatory': arcade.color.BRIGHT_UBE,\n            'ballroom': arcade.color.DARK_LIVER,\n            'kitchen': arcade.color.KHAKI,\n            'dining-room': arcade.color.FIELD_DRAB,\n            'guessing_room': arcade.color.BLACK\n\n        }\n        return room_colors.get(room, arcade.color.BURNT_ORANGE)\n\n    # Method for creating and returning a list of the classic rooms from Clue\n    def generate_rooms(self):\n        # Hall, Lounge, Dining Room, Kitchen, Ballroom, Conservatory, Billiard Room, Library, and Study\n        hall = Room(\"hall\", \"\", [[19, 8], [16, 11], [16, 12]], \"images/hall.jpeg\", .99)\n        lounge = Room(\"lounge\", \"conservatory\", [[17, 17]], \"images/lounge.jpeg\", 1)\n        clue_room = Room(\"clue_room\", \"\", [], \"images/clue-room.jpeg\", 1)\n        dining_room = Room(\"dining_room\", \"\", [[11, 15], [15, 17]], \"images/dining-room.png\", .399)\n        kitchen = Room(\"kitchen\", \"study\", [[6, 19]], \"images/kitchen.jpeg\", 1)\n        ballroom = Room(\"ballroom\", \"\", [[4, 7], [4, 16]], \"images/ballroom.png\", .4)\n        conservatory = Room(\"conservatory\", \"lounge\", [[4, 6]], \"images/conservatory.png\", .4)\n        billiard_room = Room(\"billiard_room\", \"\", [[8, 6], [12, 1]], \"images/billiard.jpeg\", 1)\n        library = Room(\"library\", \"\", [[12, 3], [15, 7]], \"images/library.png\", .4)\n        study = Room(\"study\", \"kitchen\", [[19, 6]], \"images/study.jpeg\", 1)\n\n        return [hall, lounge, study, clue_room, dining_room, billiard_room, kitchen, conservatory, ballroom, library]\n\n    # Dice Roll event caller\n    def on_click_roll(self, event):\n        print(\"Roll:\", event)\n\n    # Method  that randomly selects three cards for the case file\n    def get_case_file(self, deck):\n        one_of_each_list = [\"character\", \"room\", \"weapon\"]\n        case_file = []\n        for card in deck:\n            if card.cardType in one_of_each_list:\n                case_file.append(card)\n                one_of_each_list.remove(card.cardType)\n                deck.remove(card)\n        return case_file\n\n    # Method for drawing sidebar\n    def draw_sidebar(self):\n        arcade.draw_rectangle_filled(\n            self.width - SIDEBAR_WIDTH / 2,\n            self.height / 2,\n            SIDEBAR_WIDTH,\n            self.height,\n            arcade.color.LIGHT_BROWN\n        )\n        y_value = 750\n        for card_type in ['Weapons', 'Rooms', 'Players']:\n            if card_type == 'Players':\n                y_value -= 50\n            arcade.draw_text(card_type, self.width - SIDEBAR_WIDTH + 10, y_value,\n                             arcade.color.BLACK, 12, width=180, align=\"left\", anchor_x=\"left\", anchor_y=\"top\")\n            y_value -= 135\n\n    def draw_buttons(self):\n        characters = ['Miss Scarlett', 'Colonel Mustard', 'Mrs. White', 'Mr. Green', 'Mrs. Peacock',\n                      'Professor Plum']\n        rooms = ['Kitchen', 'Ballroom', 'Conservatory', 'Dining Room', 'Billiard Room', 'Library', 'Lounge',\n                 'Hall', 'Study']\n        weapons = ['Candlestick', 'Dagger', 'Lead Pipe', 'Revolver', 'Rope', 'Wrench']\n        y_value = 780\n        for items in [weapons, rooms, characters]:\n            y_value -= 42\n            for item in items:\n                y_value -= 16\n                # adding button objects so that checkboxes can be clickable\n                self.sidebar_buttons.append(Button(self.width - SIDEBAR_WIDTH + 150, y_value, 10, 10, item, False))\n                self.sidebar_buttons.append(Button(self.width - SIDEBAR_WIDTH + 200, y_value, 10, 10, item, True))\n\n    def draw_guess_box(self):\n        text = 'Make Guess'\n\n\n\n    def on_draw(self):\n        # Clear pixels\n        self.clear()\n\n        arcade.start_render()\n\n        # Draw grid sprites\n        self.grid_sprite_list.draw()\n        self.room_sprite_list.draw()\n\n        # Draw players & sidebar\n        self.player_list.draw()\n        self.draw_sidebar()\n\n        # draw clickable die\n        if self.die_visible:\n            self.die.draw()\n\n        # draw sidebar buttons:\n        for button in self.sidebar_buttons:\n            button.draw()\n\n    # Redraw sprite when sprite moves\n    def on_update(self, delta_time):\n        self.players[0].update()\n        self.run()\n    # Allow player movement with arrow keys\n    # time delay to allow for sprite to move\n    # one grid square at a time per key press\n    def on_key_press(self, key, modifiers):\n        if key == arcade.key.I:\n            inv = InventoryMenu(self, self.player_cards)\n            self.window.show_view(inv)\n        if key == arcade.key.UP:\n            self.up_pressed = True\n            self.update_player_movement()\n        elif key == arcade.key.DOWN:\n            self.down_pressed = True\n            self.update_player_movement()\n        elif key == arcade.key.LEFT:\n            self.left_pressed = True\n            self.update_player_movement()\n        elif key == arcade.key.RIGHT:\n            self.right_pressed = True\n            self.update_player_movement()\n\n    def on_key_release(self, key, modifiers):\n        if key == arcade.key.UP:\n            self.up_pressed = False\n            self.update_player_movement()\n        elif key == arcade.key.DOWN:\n            self.down_pressed = False\n            self.update_player_movement()\n        elif key == arcade.key.LEFT:\n            self.left_pressed = False\n            self.update_player_movement()\n        elif key == arcade.key.RIGHT:\n            self.right_pressed = False\n            self.update_player_movement()\n\n    def update_player_movement(self):\n        self.players[0].change_x = 0\n        self.players[0].change_y = 0\n\n        if self.up_pressed and not self.down_pressed:\n            self.players[0].change_y = PLAYER_MOVEMENT\n            time.sleep(0.1)\n            self.move_list.append(self.players[0].center_y)\n        elif self.down_pressed and not self.up_pressed:\n            self.players[0].change_y = -PLAYER_MOVEMENT\n            time.sleep(0.1)\n            self.move_list.append(self.players[0].center_y)\n        if self.left_pressed and not self.right_pressed:\n            self.players[0].change_x = -PLAYER_MOVEMENT\n            time.sleep(0.1)\n            self.move_list.append(self.players[0].center_x)\n        elif self.right_pressed and not self.left_pressed:\n            self.players[0].change_x = PLAYER_MOVEMENT\n            time.sleep(0.1)\n            self.move_list.append(self.players[0].center_x)\n        if self.press >= self.limit:\n            self.players[0].change_y = 0\n            self.players[0].change_x = 0\n        # for i in range(self.moves_list):\n        #     if self.players[0].center == self.moves_list[i-1]:\n\n    # event handler for player turn order and npc movement\n    def run(self):\n        rand = random.randrange(0, 4)\n        if self.current_player == 0:\n            if self.right_pressed or self.left_pressed or self.up_pressed or self.down_pressed:\n                self.press += 1\n                print(self.press)\n            if self.press >= self.limit:\n                self.current_player += 1\n        for count, npc in enumerate(self.player_npcs):\n            if self.current_player == 1 + count:\n                self.moves += 1\n                i = 0\n                if self.moves >= self.idle:\n                    for j in range(self.limit):\n                        if rand == 0:\n                            npc.change_x = PLAYER_MOVEMENT\n                            rand = random.randrange(0, 4)\n                            # time.sleep(0.25)\n                            i += 1\n                            npc.update()\n                            time.sleep(0.25)\n                            # self.step = 0\n                        elif rand == 1:\n                            npc.change_y = PLAYER_MOVEMENT\n                            rand = random.randrange(0, 4)\n                            # time.sleep(0.25)\n                            i += 1\n                            npc.update()\n                            time.sleep(0.25)\n                            # self.step = 0\n                        elif rand == 2:\n                            npc.change_x = -PLAYER_MOVEMENT\n                            rand = random.randrange(0, 4)\n                            print(rand)\n                            # time.sleep(0.25)\n                            i += 1\n                            npc.update()\n                            time.sleep(0.25)\n                            # self.step = 0\n                        elif rand == 3:\n                            npc.change_y = -PLAYER_MOVEMENT\n                            rand = random.randrange(0, 4)\n                            print(rand)\n                            i += 1\n                            npc.update()\n                            time.sleep(0.25)\n                            # self.step = 0\n                        # npc.update()\n                    print('next player')\n                    if i >= self.limit:\n                        npc.change_x = 0\n                        npc.change_y = 0\n                    self.current_player += 1\n                    self.moves = 0\n        if self.current_player > len(self.player_npcs):\n            self.press = 0\n            self.current_player = 0\n\n    # Mouse listener\n    def on_mouse_press(self, x, y, button, modifiers):\n        \n        # Convert the clicked mouse position into grid coordinates\n        column = int(x // (WIDTH + MARGIN))\n        row = int(y // (HEIGHT + MARGIN))\n\n        print(f\"Click coordinates: ({x}, {y}). Grid coordinates: ({row}, {column})\")\n\n        # Make sure we are on-grid. It is possible to click in the upper right\n        # corner in the margin and go to a grid location that doesn't exist\n        if row >= ROW_COUNT or column >= COLUMN_COUNT:\n            # Simply return from this method since nothing needs updating\n            return\n\n        # 915 - 925,  718 - 728 -16y\n        \"\"\"\n        # Flip the location between 1 and 0.\n        if self.grid[row][column] == 0:\n            self.grid[row][column] = 1\n        else:\n            self.grid[row][column] = 0\n        \"\"\"\n        # Update the sprite colors to match the new grid\n        self.resync_grid_with_sprites()\n\n        # clicking within area of die to roll it, if die is visible\n        if self.die_visible:\n            if (self.die.x - self.die.width / 2 < x < self.die.x + self.die.width / 2\n                    and self.die.y - self.die.height / 2 < y < self.die.y + self.die.height / 2):\n                self.die.roll_die()\n                print(\"Rolled Die\")\n        # making boxes clickable\n        for button in self.sidebar_buttons:\n            button.check_click(x, y)\n\n\ndef main():\n    window = arcade.Window(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)\n    startView = StartView(SCREEN_WIDTH, SCREEN_HEIGHT)\n    window.show_view(startView)\n    arcade.run()\n\n\nif __name__ == \"__main__\":\n    main()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 13260a5f126554b2ab15a76c9cdaa5ea895fd47e)
+++ b/main.py	(date 1711996276939)
@@ -33,7 +33,8 @@
 # Sprite settings
 PLAYER_MOVEMENT = 32
 SPRITE_SCALING = 0.06
-            
+
+
 # starting view, class
 class StartView(arcade.View):
     def __init__(self, width, height):
@@ -48,8 +49,9 @@
 
     def on_mouse_press(self, _x, _y, _button, _modifiers):
         """ If the user presses the mouse button, start the game. """
-        clueGameView = ClueGameView(self.width, self.height)
-        self.window.show_view(clueGameView)
+        clueGame = ClueGameView(self.width, self.height)
+        turnView = TurnView(self.width, self.height, clueGame)
+        self.window.show_view(turnView)
 
     def on_draw(self):
         """ Draw this view """
@@ -89,17 +91,94 @@
         arcade.set_background_color(arcade.csscolor.DARK_SLATE_BLUE)
 
 
+# View for in between turns, to manage turns
+class TurnView(arcade.View):
+    def __init__(self, width, height, clueGame):
+        super().__init__()
+        self.width = width
+        self.height = height
+        arcade.load_font("bulletin-gothic/BulletinGothic.otf")
+        self.clueGame = clueGame
+        self.current_player = clueGame.current_player
+
+    def on_mouse_press(self, _x, _y, _button, _modifiers):
+        """ If the user presses the mouse button, start the game. """
+        # clueGameView = ClueGameView(self.width, self.height)
+        # self.window.show_view(clueGameView)
+        if self.current_player == 0:
+            rollDieView = RollDieView(self.width, self.height, self.clueGame)
+            self.window.show_view(rollDieView)
+        else:
+            clueGame.die.roll_die()
+
+    def on_draw(self):
+        """ Draw this view """
+        self.clear()
+        # example text
+        # text = "Turn 1: Player Turn \n Click To Continue"
+
+        arcade.draw_text("Turn 1: Player Turn", self.window.width / 2, self.window.height / 2,
+                         arcade.color.FLORAL_WHITE, font_name="Bulletin Gothic", font_size=50, anchor_x="center")
+        arcade.draw_text("Click To Continue", self.window.width / 2, self.window.height / 2 - 100,
+                         arcade.color.FLORAL_WHITE, font_name="Bulletin Gothic", font_size=50, anchor_x="center")
+
+    def on_show_view(self):
+        """ This is run once when we switch to this view """
+        arcade.set_background_color(arcade.csscolor.DARK_SLATE_BLUE)
+
+
+class RollDieView(arcade.View):
+    def __init__(self, width, height, clueGame):
+        super().__init__()
+        self.clueGame = clueGame
+        self.width = width
+        self.height = height
+        arcade.load_font("bulletin-gothic/BulletinGothic.otf")
+        #self.die = Die(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, 100, 100)
+
+    def on_mouse_press(self, x, y, button, modifiers):
+        """ If the user presses the mouse button, start the game. """
+        # clueGameView = ClueGameView(self.width, self.height)
+        # self.window.show_view(clueGameView)
+        #rolled = False
+        if (self.clueGame.die.x - self.clueGame.die.width / 2 < x < self.clueGame.die.x + self.clueGame.die.width / 2
+                and self.clueGame.die.y - self.clueGame.die.height / 2 < y < self.clueGame.die.y +
+                self.clueGame.die.height / 2):
+            self.clueGame.die.roll_die()
+
+        #if rolled:
+            #time.sleep(2)
+            self.window.show_view(self.clueGame)
+            #print("Mouse button is pressed")
+
+    def on_draw(self):
+        """ Draw this view """
+        self.clear()
+        # example text
+        # text = "Turn 1: Player Turn \n Click To Continue"
+        self.clueGame.die.draw()
+
+        arcade.draw_text("Click The Die To Roll!", self.window.width / 2, ( 4 * self.window.height / 5),
+                         arcade.color.FLORAL_WHITE, font_name="Bulletin Gothic", font_size=50, anchor_x="center")
+        #arcade.draw_text("Click To Continue", self.window.width / 2, self.window.height / 2 - 100,
+                         #arcade.color.FLORAL_WHITE, font_name="Bulletin Gothic", font_size=50, anchor_x="center")
+
+    def on_show_view(self):
+        """ This is run once when we switch to this view """
+        arcade.set_background_color(arcade.csscolor.BLACK)
+
+
 class ClueGameView(arcade.View):  # (arcade.Window)
     def __init__(self, width, height):
         super().__init__()
         # super().__init__(width, height, title)
         self.width = width
         self.height = height
-        
+
         # initializing deck and cards
         self.deck = Deck.initialize_cards()
         self.player_cards = self.deck
-        
+
         # We can quickly build a grid with python list comprehension
         self.grid = [[0] * COLUMN_COUNT for _ in range(ROW_COUNT)]
 
@@ -227,9 +306,9 @@
         self.resync_grid_with_sprites()
 
         # adding die to sidebar as class object
-        self.die = Die(DIE_X, DIE_Y, 50, 50)
+        self.die = Die(DIE_X, DIE_Y, 100, 100)
         # bool to control whether die appears or not
-        self.die_visible = True
+        self.die_visible = False
 
         # adding class object, sidebar buttons
         self.sidebar_buttons = []
@@ -325,8 +404,6 @@
     def draw_guess_box(self):
         text = 'Make Guess'
 
-
-
     def on_draw(self):
         # Clear pixels
         self.clear()
@@ -353,6 +430,7 @@
     def on_update(self, delta_time):
         self.players[0].update()
         self.run()
+
     # Allow player movement with arrow keys
     # time delay to allow for sprite to move
     # one grid square at a time per key press
@@ -474,7 +552,7 @@
 
     # Mouse listener
     def on_mouse_press(self, x, y, button, modifiers):
-        
+
         # Convert the clicked mouse position into grid coordinates
         column = int(x // (WIDTH + MARGIN))
         row = int(y // (HEIGHT + MARGIN))
Index: die_arcade.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"import arcade\nimport arcade.gui\nimport random\n\n''' functionality '''\n\n# Side bar width is 320, therefore:\n# 250 / 500 === 160 / 320\n\n\n# SIDEBAR CONSTANTS\nSCREEN_WIDTH = 1090\nSCREEN_HEIGHT = 770\nSIDEBAR_WIDTH = 320\n\nSIDEBAR_X = SCREEN_WIDTH - SIDEBAR_WIDTH / 2\nSIDEBAR_Y = SCREEN_HEIGHT / 2\n\nDIE_X = SIDEBAR_X\nDIE_Y = SIDEBAR_Y - 200\nDIE_OFFSET = 25\n\n\n#arcade.draw_rectangle_filled(self.width - SIDEBAR_WIDTH / 2, self.height / 2, SIDEBAR_WIDTH, self.height, arcade.color.LIGHT_YELLOW)\n# generate points function\ndef generatePoints(die_value):\n    # Set of points ( this will be the die values ), which will be manipulated in a larger function\n    point_list = ()  # x1 & y1 - x6 & y6\n    if die_value == 1:\n        point_list = ((DIE_X, DIE_Y),  # x1 & y1\n                      (DIE_X, DIE_Y),  # x2 & y2\n                      (DIE_X, DIE_Y),  # x3 & y3\n                      (DIE_X, DIE_Y),  # x4 & y4\n                      (DIE_X, DIE_Y),  # x5 & y5\n                      (DIE_X, DIE_Y))  # x6 & y6\n    elif die_value == 2:\n        point_list = ((DIE_X-DIE_OFFSET, DIE_Y-DIE_OFFSET),  # x1 & y1\n                      (DIE_X-DIE_OFFSET, DIE_Y-DIE_OFFSET),  # x2 & y2\n                      (DIE_X-DIE_OFFSET, DIE_Y-DIE_OFFSET),  # x3 & y3\n                      (DIE_X-DIE_OFFSET, DIE_Y-DIE_OFFSET),  # x4 & y4\n                      (DIE_X-DIE_OFFSET, DIE_Y-DIE_OFFSET),  # x5 & y5\n                      (DIE_X+DIE_OFFSET, DIE_Y+DIE_OFFSET))  # x6 & y6\n    elif die_value == 3:\n        point_list = ((DIE_X-DIE_OFFSET, DIE_Y-DIE_OFFSET),  # x1 & y1\n                      (DIE_X-DIE_OFFSET, DIE_Y-DIE_OFFSET),  # x2 & y2\n                      (DIE_X-DIE_OFFSET, DIE_Y-DIE_OFFSET),  # x3 & y3\n                      (DIE_X-DIE_OFFSET, DIE_Y-DIE_OFFSET),  # x4 & y4\n                      (DIE_X+DIE_OFFSET, DIE_Y+DIE_OFFSET),  # x5 & y5\n                      (DIE_X, DIE_Y))  # x6 & y6\n    elif die_value == 4:\n        point_list = ((DIE_X-DIE_OFFSET, DIE_Y-DIE_OFFSET),  # x1 & y1\n                      (DIE_X+DIE_OFFSET, DIE_Y+DIE_OFFSET),  # x2 & y2\n                      (DIE_X+DIE_OFFSET, DIE_Y-DIE_OFFSET),  # x3 & y3\n                      (DIE_X-DIE_OFFSET, DIE_Y+DIE_OFFSET),  # x4 & y4\n                      (DIE_X-DIE_OFFSET, DIE_Y-DIE_OFFSET),  # x5 & y5\n                      (DIE_X-DIE_OFFSET, DIE_Y-DIE_OFFSET))  # x6 & y6\n    elif die_value == 5:\n        point_list = ((DIE_X-DIE_OFFSET, DIE_Y-DIE_OFFSET),  # x1 & y1\n                      (DIE_X+DIE_OFFSET, DIE_Y+DIE_OFFSET),  # x2 & y2\n                      (DIE_X+DIE_OFFSET, DIE_Y-DIE_OFFSET),  # x3 & y3\n                      (DIE_X-DIE_OFFSET, DIE_Y+DIE_OFFSET),  # x4 & y4\n                      (DIE_X, DIE_Y),  # x5 & y5\n                      (DIE_X, DIE_Y))  # x6 & y6\n    elif die_value == 6:\n        point_list = ((DIE_X-DIE_OFFSET, DIE_Y-DIE_OFFSET),  # x1 & y1\n                      (DIE_X+DIE_OFFSET, DIE_Y+DIE_OFFSET),  # x2 & y2\n                      (DIE_X+DIE_OFFSET, DIE_Y-DIE_OFFSET),  # x3 & y3\n                      (DIE_X-DIE_OFFSET, DIE_Y+DIE_OFFSET),  # x4 & y4\n                      (DIE_X-DIE_OFFSET, DIE_Y),  # x5 & y5\n                      (DIE_X+DIE_OFFSET, DIE_Y))  # x6 & y6\n    text = \"You rolled a \" + str(die_value) + \"!\"\n    arcade.draw_text(text, DIE_X-40, DIE_Y - 100, arcade.color.BLUSH, 10)\n    return point_list\n\n\n# function for drawing die points\ndef drawDiePoints(point_list):\n    for point in point_list:\n        arcade.draw_circle_filled(point[0], point[1], 10, arcade.color.WHITE)\n\n\ndef rollDie():\n    # arcade.draw_text(\"Press the spacebar to roll the die!\", 105, 100, arcade.color.WHITE, 15)\n    # Drawing in die rectangle\n    arcade.draw_rectangle_filled(SIDEBAR_X, (SIDEBAR_Y - 200), 100, 100, arcade.color.BLUSH)\n    drawDiePoints(generatePoints(random.randint(1, 6)))\n    \"\"\"\n\nimport arcade\nimport random\nfrom arcade.gui import UIInteractiveWidget, UIMousePressEvent\n\n''' functionality '''\n\n# SIDEBAR CONSTANTS\nSCREEN_WIDTH = 1090\nSCREEN_HEIGHT = 770\nSIDEBAR_WIDTH = 320\n\nSIDEBAR_X = SCREEN_WIDTH - SIDEBAR_WIDTH / 2\nSIDEBAR_Y = SCREEN_HEIGHT / 2\n\nDIE_X = SIDEBAR_X + 50\nDIE_Y = SIDEBAR_Y - 250\nDIE_OFFSET = 15\n\n\n# generate points function\ndef generate_points(die_value):\n    point_list = ()\n    if die_value == 1:\n        point_list = ((DIE_X, DIE_Y),) * 6\n    elif die_value == 2:\n        point_list = ((DIE_X - DIE_OFFSET, DIE_Y - DIE_OFFSET),) * 2 + ((DIE_X + DIE_OFFSET, DIE_Y + DIE_OFFSET),) * 4\n    elif die_value == 3:\n        point_list = ((DIE_X - DIE_OFFSET, DIE_Y - DIE_OFFSET),) * 2 + (\n        (DIE_X + DIE_OFFSET, DIE_Y + DIE_OFFSET),) * 2 + ((DIE_X, DIE_Y),) * 2\n    elif die_value == 4:\n        point_list = ((DIE_X - DIE_OFFSET, DIE_Y - DIE_OFFSET), (DIE_X + DIE_OFFSET, DIE_Y + DIE_OFFSET),\n                      (DIE_X + DIE_OFFSET, DIE_Y - DIE_OFFSET), (DIE_X - DIE_OFFSET, DIE_Y + DIE_OFFSET),\n                      (DIE_X - DIE_OFFSET, DIE_Y - DIE_OFFSET),) * 2\n    elif die_value == 5:\n        point_list = ((DIE_X - DIE_OFFSET, DIE_Y - DIE_OFFSET), (DIE_X + DIE_OFFSET, DIE_Y + DIE_OFFSET),\n                      (DIE_X + DIE_OFFSET, DIE_Y - DIE_OFFSET), (DIE_X - DIE_OFFSET, DIE_Y + DIE_OFFSET),\n                      (DIE_X, DIE_Y),) * 2\n    elif die_value == 6:\n        point_list = ((DIE_X - DIE_OFFSET, DIE_Y - DIE_OFFSET), (DIE_X + DIE_OFFSET, DIE_Y + DIE_OFFSET),\n                      (DIE_X + DIE_OFFSET, DIE_Y - DIE_OFFSET), (DIE_X - DIE_OFFSET, DIE_Y + DIE_OFFSET),\n                      (DIE_X - DIE_OFFSET, DIE_Y), (DIE_X + DIE_OFFSET, DIE_Y),)\n\n    text = f\"You rolled a {die_value}!\"\n    arcade.draw_text(text, DIE_X - 45, DIE_Y - 50, arcade.color.BLACK, 10)\n    for point in point_list:\n        arcade.draw_circle_filled(point[0], point[1], 5, arcade.color.WHITE)\n\n\nclass Die:\n    def __init__(self, x, y, width, height):\n        self.x = x\n        self.y = y\n        self.width = width\n        self.height = height\n        self.die_value = 1\n\n    def roll_die(self):\n        self.die_value = random.randint(1, 6)\n        generate_points(self.die_value)\n\n    def draw(self):\n        arcade.draw_rectangle_filled(self.x, self.y, self.width, self.height, arcade.color.BLUSH)\n        generate_points(self.die_value)\n\n\nclass MyWindow(arcade.Window):\n    def __init__(self, width, height, title):\n        super().__init__(width, height, title)\n        self.Die = Die(DIE_X, DIE_Y, 100, 100)\n\n    def on_draw(self):\n        arcade.start_render()\n        self.Die.draw()\n\n    # Creating function to check the mouse clicks\n    def on_mouse_press(self, x, y, button, modifiers):\n        if (self.Die.x - self.Die.width / 2 < x < self.Die.x + self.Die.width / 2\n                and self.Die.y - self.Die.height / 2 < y < self.Die.y + self.Die.height / 2):\n            self.Die.roll_die()\n            print(\"Mouse button is pressed\")\n\n\ndef main():\n    MyWindow(SCREEN_WIDTH, SCREEN_HEIGHT, \"Interactive Die Example\")\n    arcade.set_background_color(arcade.color.AIR_FORCE_BLUE)\n    arcade.run()\n\n\nif __name__ == \"__main__\":\n    main()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/die_arcade.py b/die_arcade.py
--- a/die_arcade.py	(revision 13260a5f126554b2ab15a76c9cdaa5ea895fd47e)
+++ b/die_arcade.py	(date 1711996053695)
@@ -85,6 +85,7 @@
     arcade.draw_rectangle_filled(SIDEBAR_X, (SIDEBAR_Y - 200), 100, 100, arcade.color.BLUSH)
     drawDiePoints(generatePoints(random.randint(1, 6)))
     """
+import time
 
 import arcade
 import random
@@ -100,9 +101,13 @@
 SIDEBAR_X = SCREEN_WIDTH - SIDEBAR_WIDTH / 2
 SIDEBAR_Y = SCREEN_HEIGHT / 2
 
-DIE_X = SIDEBAR_X + 50
-DIE_Y = SIDEBAR_Y - 250
-DIE_OFFSET = 15
+#DIE_X = SIDEBAR_X + 50
+#DIE_Y = SIDEBAR_Y - 250
+#DIE_OFFSET = 15
+
+DIE_X = SCREEN_WIDTH / 2
+DIE_Y = SCREEN_HEIGHT / 2
+DIE_OFFSET = 30
 
 
 # generate points function
@@ -129,9 +134,9 @@
                       (DIE_X - DIE_OFFSET, DIE_Y), (DIE_X + DIE_OFFSET, DIE_Y),)
 
     text = f"You rolled a {die_value}!"
-    arcade.draw_text(text, DIE_X - 45, DIE_Y - 50, arcade.color.BLACK, 10)
+    arcade.draw_text(text, DIE_X - 130, DIE_Y - 150, arcade.color.BLUSH, 30)
     for point in point_list:
-        arcade.draw_circle_filled(point[0], point[1], 5, arcade.color.WHITE)
+        arcade.draw_circle_filled(point[0], point[1], 10, arcade.color.WHITE)
 
 
 class Die:
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"0f8d2774-c6ca-4acd-9b7e-129099a88ecb\" name=\"Changes\" comment=\"merging\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <excluded-from-favorite>\n      <branch-storage>\n        <map>\n          <entry type=\"LOCAL\">\n            <value>\n              <list>\n                <branch-info repo=\"$PROJECT_DIR$\" source=\"main\" />\n              </list>\n            </value>\n          </entry>\n        </map>\n      </branch-storage>\n    </excluded-from-favorite>\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n    <option name=\"SWAP_SIDES_IN_COMPARE_BRANCHES\" value=\"true\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;sdejesu1&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">\n    <option name=\"selectedUrlAndAccountId\">\n      <UrlAndAccount>\n        <option name=\"accountId\" value=\"fbb8c125-faa6-4840-9b66-c9025165755f\" />\n        <option name=\"url\" value=\"https://github.com/atlibby/CS3050-Final-Project.git\" />\n      </UrlAndAccount>\n    </option>\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 0\n}</component>\n  <component name=\"ProjectId\" id=\"2cv6SPtgWSpxg4ECGDJD5Vkw371\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"WebServerToolWindowFactoryState\": \"false\",\n    \"git-widget-placeholder\": \"steven\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"RunManager\" selected=\"Python.dieArcade\">\n    <configuration name=\"dieArcade\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\n      <module name=\"CS3050-Final-Project\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"SDK_NAME\" value=\"Python 3.9\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/dieArcade.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\n      <module name=\"CS3050-Final-Project\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"SDK_NAME\" value=\"Python 3.9\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"0f8d2774-c6ca-4acd-9b7e-129099a88ecb\" name=\"Changes\" comment=\"\" />\n      <created>1708979703590</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1708979703590</updated>\n      <workItem from=\"1708979705347\" duration=\"467000\" />\n      <workItem from=\"1708981442634\" duration=\"919000\" />\n      <workItem from=\"1709557925586\" duration=\"10752000\" />\n      <workItem from=\"1709587359308\" duration=\"3494000\" />\n      <workItem from=\"1709686097950\" duration=\"34000\" />\n      <workItem from=\"1709737744653\" duration=\"10000\" />\n      <workItem from=\"1710788488440\" duration=\"3067000\" />\n      <workItem from=\"1710957814072\" duration=\"5081000\" />\n      <workItem from=\"1710963603122\" duration=\"4392000\" />\n      <workItem from=\"1711041306786\" duration=\"1763000\" />\n      <workItem from=\"1711139189606\" duration=\"1636000\" />\n      <workItem from=\"1711233182286\" duration=\"14338000\" />\n      <workItem from=\"1711318397830\" duration=\"74000\" />\n      <workItem from=\"1711318721772\" duration=\"863000\" />\n      <workItem from=\"1711319600544\" duration=\"194000\" />\n      <workItem from=\"1711320031954\" duration=\"77000\" />\n      <workItem from=\"1711374362105\" duration=\"1554000\" />\n      <workItem from=\"1711546586571\" duration=\"10310000\" />\n      <workItem from=\"1711566798674\" duration=\"3780000\" />\n      <workItem from=\"1711650665360\" duration=\"24875000\" />\n      <workItem from=\"1711740404608\" duration=\"29000\" />\n      <workItem from=\"1711918732881\" duration=\"1329000\" />\n      <workItem from=\"1711920465709\" duration=\"30000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"merging\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1710963481343</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1710963481343</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"2\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"merging\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"merging\" />\n  </component>\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\n    <SUITE FILE_PATH=\"coverage/CS3050_Final_Project$die_arcade.coverage\" NAME=\"die_arcade Coverage Results\" MODIFIED=\"1711547125180\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/CS3050_Final_Project$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1711919995281\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/CS3050_Final_Project$menus.coverage\" NAME=\"menus Coverage Results\" MODIFIED=\"1711375634400\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/CS3050_Final_Project$room.coverage\" NAME=\"room Coverage Results\" MODIFIED=\"1711319098863\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/CS3050_Final_Project$checkboxes.coverage\" NAME=\"checkboxes Coverage Results\" MODIFIED=\"1711567887445\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/CS3050_Final_Project$die.coverage\" NAME=\"die Coverage Results\" MODIFIED=\"1710962845848\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/CS3050_Final_Project$Card.coverage\" NAME=\"Card Coverage Results\" MODIFIED=\"1709590405721\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/CS3050_Final_Project$dieArcade.coverage\" NAME=\"dieArcade Coverage Results\" MODIFIED=\"1711918764023\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"true\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 13260a5f126554b2ab15a76c9cdaa5ea895fd47e)
+++ b/.idea/workspace.xml	(date 1711998528025)
@@ -4,7 +4,11 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="0f8d2774-c6ca-4acd-9b7e-129099a88ecb" name="Changes" comment="merging" />
+    <list default="true" id="0f8d2774-c6ca-4acd-9b7e-129099a88ecb" name="Changes" comment="merging">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/die_arcade.py" beforeDir="false" afterPath="$PROJECT_DIR$/die_arcade.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -64,20 +68,20 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "WebServerToolWindowFactoryState": "false",
-    "git-widget-placeholder": "steven",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;steven&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
-  <component name="RunManager" selected="Python.dieArcade">
+}</component>
+  <component name="RunManager" selected="Python.main">
     <configuration name="dieArcade" type="PythonConfigurationType" factoryName="Python" nameIsGenerated="true">
       <module name="CS3050-Final-Project" />
       <option name="INTERPRETER_OPTIONS" value="" />
@@ -156,6 +160,8 @@
       <workItem from="1711740404608" duration="29000" />
       <workItem from="1711918732881" duration="1329000" />
       <workItem from="1711920465709" duration="30000" />
+      <workItem from="1711920499865" duration="4994000" />
+      <workItem from="1711995153348" duration="1230000" />
     </task>
     <task id="LOCAL-00001" summary="merging">
       <option name="closed" value="true" />
@@ -188,7 +194,7 @@
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/CS3050_Final_Project$die_arcade.coverage" NAME="die_arcade Coverage Results" MODIFIED="1711547125180" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
-    <SUITE FILE_PATH="coverage/CS3050_Final_Project$main.coverage" NAME="main Coverage Results" MODIFIED="1711919995281" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/CS3050_Final_Project$main.coverage" NAME="main Coverage Results" MODIFIED="1711996238283" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/CS3050_Final_Project$menus.coverage" NAME="menus Coverage Results" MODIFIED="1711375634400" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/CS3050_Final_Project$room.coverage" NAME="room Coverage Results" MODIFIED="1711319098863" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
     <SUITE FILE_PATH="coverage/CS3050_Final_Project$checkboxes.coverage" NAME="checkboxes Coverage Results" MODIFIED="1711567887445" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
